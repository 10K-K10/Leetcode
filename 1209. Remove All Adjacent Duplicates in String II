/*
Given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and 
equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made.

*/

class Solution {
public:
    string removeDuplicates(string s, int k) {
       
        
        int n = s.size();
        if(n<k) return s;
        stack<pair<char, int>> st;

        for(int i = 0;i<n;i++)
        {
            
            if(!st.empty() and st.top().first==s[i])
            {
                auto prev=st.top();
                st.pop();
                st.push({s[i],prev.second+1});
            }
            else
                st.push({s[i],1});
            
            if(st.top().second==k)  st.pop();
        }
        string str="";
        while(!st.empty())
        {
            auto curr=st.top();
            st.pop();
            while(curr.second){
                str+=curr.first;
                curr.second--;
            }
        }
        reverse(str.begin(),str.end());
        return str;
    }
};
