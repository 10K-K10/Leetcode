// ---> Method 1-> Making Pop Operation Costly
class MyStack {
public:
    queue<int> q1;
    queue<int> q2;
    MyStack() {
        
    }
    
    void push(int x) {
        q1.push(x);
    }
    
    int pop() {
        while(q1.size()>1)
        {
            q2.push(q1.front());
            q1.pop();
        }
        int x = q1.front();
        q1.pop();
        while(q2.size())
        {
            q1.push(q2.front());
            q2.pop();
            
        }
        return x;
    }
    
    int top() {
         while(q1.size()!=1)
        {
            q2.push(q1.front());
            q1.pop();
            
        }
        int x = q1.front();
        q1.pop();
        while(q2.size())
        {
            q1.push(q2.front());
            q2.pop();
            
        }
        q1.push(x);
        return x;
    }
    
    bool empty() {
       return q1.empty();  
        
    }
};



// ---> Method 2->Making Push Operation Costly

class MyStack {
public:
    queue<int> q1;
    queue<int> q2;
    
    MyStack() {
        
    }
    
    void push(int x) {
        q2.push(x);
        
        while(q1.size())
        {
            q2.push(q1.front());
            q1.pop();
        }
        queue<int> q=q1;
        q1=q2;
        q2=q;
    }
    
    int pop() {
        int x= q1.front();
        q1.pop();
        return x;
    }
    
    int top() {
        return q1.front();
    }
    
    bool empty() {
        return q1.empty();
    }
};


// ---> Method 3->Using Single Queue  (Most Efficient)

class MyStack {
public:
    queue<int> q;
    MyStack() {
        
    }
    
    void push(int x) {
        int n = q.size();
        q.push(x);
        for(int i =0;i<n;i++)
        {
            q.push(q.front());
            q.pop();
        }
    }
    
    int pop() {
        int x= q.front();
        q.pop();
        return x;
        
    }
    
    int top() {
        return q.front();
    }
    
    bool empty() {
        return q.empty();
    }
};
